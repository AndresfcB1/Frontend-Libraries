--Getting Started with React Redux

class DisplayMessages extends React.Component {
  // Change code below this line
 constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages:[]
    }
  }
  // Change code above this line
  render() {
    return <div />
  }
};

--Manage State Locally First

class DisplayMessages extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      input: '',
      messages: []
    }
  }
  // add handleChange() and submitMessage() methods here
  handleChange(event){
    this.setState({
      input: event.target.value,
      messages: this.state.messages
    })
  }

  submitMessage(){
    this.setState({
      input: '',
      messages: [...this.state.messages, this.state.input]
    })
  }

  render() {
    const items=this.state.messages.map((x)=>(
            <li key={x}>{x}</li>
          ));
    return (
      <div>
        <h2>Type in a new Message:</h2>
        { /* render an input, button, and ul here */ }
        <input onChange={this.handleChange.bind(this)} value={this.state.input}/>
        <button onClick={this.submitMessage.bind(this)}>Submit</button>
        <ul>
        {items}
        </ul>
        { /* change code above this line */ }
      </div>
    );
  }
};

--Extract State Logic to Redux

// Define ADD, addMessage(), messageReducer(), and store here:

const ADD='ADD';


function addMessage(message){
 return {
'type':ADD,
'message':message
};
}


const messageReducer = (state = [], action) => {
  switch(action.type) {
    // Change code below this line
case ADD:
 let arr = [...state, action.message];
      return arr;


    // Change code above this line
    default:
      return state;
  }
};

const store = Redux.createStore(messageReducer);
